/*! html5-player - v1.3.0 - 2014-08-17 */
(function($) {
    var scripts = document.getElementsByTagName("script"), _jsPath = scripts[scripts.length - 1].src;
    _jsPath = _jsPath.replace(/[^\/]*$/, "");
    $.widget("ui.htmlcontentplayer", {
        options: {
            playableElement: null,
            duration: null,
            srt: null,
            poster: null,
            autoPlay: false,
            mute: false,
            showControls: true,
            showTime: false,
            triggerOnSync: true,
            startTime: null,
            hidePrevButton: false,
            hideNextButton: false,
            hideVolButton: false,
            hideCCButton: false,
            hideFullScreenButton: false,
            fullScreen: false
        },
        _create: function() {
            if (this.options.duration === null) throw ': Please set the htmlcontentplayer\'s "duration" property manually to the length of the audio track in seconds';
            if (this.options.playableElement === null) throw ": Please set the htmlcontentplayer's \"playableElement\" property to the animation's stage";
            this.options.element = this.element;
            this.htmlContentPlayer = HtmlContentPlayer(this.options, this);
        },
        play: function(time) {
            if (time) this.htmlContentPlayer.playFrom(time); else this.htmlContentPlayer.play();
        },
        stop: function() {
            this.htmlContentPlayer.stop();
        },
        destroy: function() {
            return this.htmlContentPlayer.destroy();
        }
    });
    function HtmlContentPlayer(_options, widget) {
        var _playerContent;
        var _playerControls;
        var _anim = $("#Stage");
        var _playButton;
        var _muteButton;
        var _audioTrack;
        var _progressBar;
        var _subtitles;
        var _currentTime;
        var _timeThumb;
        var _volThumb;
        var _stage = _options.playableElement;
        var _isPlaying = false;
        var _isMuted = false;
        var _isFullscreen = false;
        var _keyframeElapsed = 0;
        var _playEnded = false;
        var _useAudioKludge = false;
        var _timelineDifference = 0;
        var _isThumbDown = false;
        var _isVolThumbDown = false;
        var _showSubtitles = false;
        var _volShowing = false;
        var _totalButtonWidth = 0;
        var _lastVolume = .75;
        var _safariTimeSliderDiff = 0;
        var _playerScale = 1;
        function init() {
            $.get(_jsPath + "html-content-player-structure.html", function(template) {
                $(_options.element).append(template);
                if (_stage.options.data.scaleToFit !== undefined && _stage.options.data.scaleToFit !== "none") {
                    _anim.hide();
                    $("#player-base").addClass("no-spin");
                    $(".player-alert").html('Your stage has "Responsive Scaling" set, please disable that option in Edge Animate.').show();
                    return;
                }
                if (_stage.options.data.centerStage !== undefined && _stage.options.data.centerStage !== "none") {
                    _anim.hide();
                    $("#player-base").addClass("no-spin");
                    $(".player-alert").html('Your stage has the "Center Stage" option set, please disable that option in Edge Animate.').show();
                    return;
                }
                layoutReady();
                widget._trigger("playerDOMReady", null, null);
            });
        }
        function layoutReady() {
            _playerContent = $(".player-content");
            _playerControls = $(".player-controls");
            _playButton = $(".player-play-button");
            _muteButton = $(".player-mute-button");
            _audioTrack = $("#narration")[0];
            _progressBar = $(".player-time-slider .player-progress");
            _subtitles = $(".player-subtitles");
            _currentTime = $(".player-current-time");
            _volThumb = $(".player-vol-slider .player-thumb");
            _timeThumb = $(".player-time-slider .player-thumb");
            _playButton.on("click", playButtonClicked);
            _muteButton.on("click", muteButtonClicked);
            _muteButton.on("mousedown", muteButtonMouseDown);
            _muteButton.on("keydown", muteButtonKeyDown);
            _volThumb.on("keydown", volThumbKeyDown);
            _volThumb.on("mousedown", volThumbMouseDown);
            _volThumb.on("touchstart", volThumbMouseDown);
            $(_audioTrack).on("timeupdate", timeUpdated);
            $(_audioTrack).on("ended", playEnded);
            $(".player-fullscreen-button").on("click", fullscreenButtonClicked);
            $(".player-time-slider .player-track").on("mousedown", timeTrackMouseDown);
            $(".player-time-slider .player-thumb").on("keydown", timeThumbKeyDown);
            $(".player-time-slider .player-thumb").on("mousedown", timeThumbMouseDown);
            $(".player-time-slider .player-thumb").on("touchstart", timeThumbMouseDown);
            $(".player-vol-button").on("click", volumeButtonClicked);
            $(".player-vol-button").on("mousedown", volumeButtonMouseDown);
            $(".player-back-button").on("click", backButtonClicked);
            $(".player-next-button").on("click", nextButtonClicked);
            $(".player-CC-button").on("click", CCButtonClicked);
            $(".player-vol-slider .player-track").on("mousedown", volTrackMouseDown);
            $(".player-vol-slider .player-track").on("touchstart", volTrackMouseDown);
            $(document).on("mousemove", documentMouseMove);
            $(document).on("touchmove", documentMouseMove);
            $(document).on("mouseup", documentMouseUp);
            $(document).on("touchend", documentMouseUp);
            $(document).on("keyup", documentKeyUp);
            $(window).on("resize", windowResized);
            if (_options.hidePrevButton) $(".player-back-button").remove();
            if (_options.hideNextButton) $(".player-next-button").remove();
            if (_options.hideVolButton) $(".player-vol-button").remove();
            if (_options.hideCCButton) $(".player-CC-button").remove();
            if (_options.hideFullScreenButton) $(".player-fullscreen-button").remove();
            _playerContent.append(_anim);
            adjustVolume(.75);
            if (navigator.vendor && navigator.vendor.match(/Apple/i) && navigator.userAgent.match(/Windows/i)) {
                _safariTimeSliderDiff = 42;
            }
            if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/iPad/i)) {
                $(".player-inner").addClass("ios");
                $(".player-vol-button").remove();
            }
            if (navigator.userAgent.match(/Android/i)) {
                $(".player-inner").addClass("android");
                $(".player-vol-button").remove();
            }
            if (navigator.vendor && navigator.vendor.match(/Apple/i)) {
                _audioTrack.play();
                _audioTrack.pause();
                _useAudioKludge = true;
            }
            if (navigator.userAgent.match(/Windows NT 6.0/i) && navigator.userAgent.match(/MSIE 9.0/i)) {
                _useAudioKludge = true;
            }
            _timeThumb.attr("aria-valuemin", 0);
            _timeThumb.attr("aria-valuemax", _options.duration);
            _volThumb.attr("aria-valuenow", 75);
            setTimeSliderWidth();
            if (_options.autoPlay) playButtonClicked();
            if (_options.mute) muteButtonClicked();
            if (!_options.showControls) {
                $(".player-controls").hide();
                _playerContent.addClass("controls-hidden");
            }
            if (_options.poster !== null) {
                $(".player-poster").css("background-image", "url(" + _options.poster + ")");
                $(".player-poster").show();
            }
            if (_options.showTime) _currentTime.show();
            $(".animation").show();
            if (_options.startTime) playFrom(_options.startTime);
            if (_options.fullScreen) {
                goFullscreen();
                windowResized();
            }
            $("#player-base, .player-inner").css("background-image", "none");
        }
        function _timeUpdated(event) {
            var currentTime = (_audioTrack.currentTime * 1e3 - _timelineDifference) / 1e3;
            if (currentTime >= _options.duration) {
                _audioTrack.pause();
                _subtitles.html("");
                playEnded();
                return;
            }
            if (_keyframeElapsed > 40) {
                if (_isPlaying) {
                    playAll(currentTime * 1e3);
                    if (_options.triggerOnSync) widget._trigger("played", null, currentTime * 1e3);
                } else {
                    stopAll(currentTime * 1e3);
                    if (_options.triggerOnSync) widget._trigger("paused", null, currentTime * 1e3);
                }
                _keyframeElapsed = 0;
            }
            _keyframeElapsed = _keyframeElapsed + 1;
            _progressBar.width(currentTime / _options.duration * 100 + "%");
            if (_showSubtitles) _subtitles.html(getSubtitle(currentTime));
            var mins = Math.floor(currentTime / 60) < 10 ? "" + Math.floor(currentTime / 60) : Math.floor(currentTime / 60);
            var secs = Math.floor(currentTime - mins * 60) < 10 ? "" + Math.floor(currentTime - mins * 60) : Math.floor(currentTime - mins * 60);
            if (_options.showTime) _currentTime.text(pad(mins, 2) + ":" + pad(secs, 2));
            _timeThumb.attr("aria-valuenow", Math.floor(currentTime));
            _timeThumb.attr("aria-valuetext", mins + " minutes " + secs + " seconds");
        }
        function timeUpdated(event) {
            try {
                _timeUpdated(event);
            } catch (e) {
                console.log("error during timeUpdated:", e);
            }
        }
        function gotoTimeAsPercentage(percentage) {
            if (percentage <= 0) {
                _subtitles.html("");
                percentage = .001;
            }
            _progressBar.width(percentage * 100 + "%");
            if (_useAudioKludge && _audioTrack.duration && !isNaN(_audioTrack.duration)) _audioTrack.currentTime = _audioTrack.duration * percentage; else _audioTrack.currentTime = _options.duration * percentage;
            if (_isPlaying) {
                playAll(_options.duration * percentage * 1e3);
                widget._trigger("played", null, _options.duration * percentage * 1e3);
            } else {
                stopAll(_options.duration * percentage * 1e3);
                widget._trigger("paused", null, _options.duration * percentage * 1e3);
            }
            if (_useAudioKludge && _audioTrack.duration && !isNaN(_audioTrack.duration)) _timelineDifference = _audioTrack.currentTime * 1e3 - _stage.getPosition();
            _playEnded = false;
        }
        function play() {
            if (_playEnded) {
                playAgain();
                _playEnded = false;
            }
            $(".player-poster").hide();
            _isPlaying = true;
            playAll();
            _audioTrack.play();
            widget._trigger("played", null, null);
            _playButton.addClass("paused");
            _playButton.html("Pause");
        }
        function playFrom(time) {
            _isPlaying = true;
            gotoTimeAsPercentage(time / 1e3 / _options.duration);
        }
        function stop() {
            _isPlaying = false;
            _audioTrack.pause();
            stopAll();
            widget._trigger("paused", null, null);
            _playButton.removeClass("paused");
            _playButton.html("Play");
        }
        function playAgain() {
            gotoTimeAsPercentage(0);
        }
        function playEnded() {
            stopAll();
            widget._trigger("paused", null, null);
            _playButton.removeClass("paused");
            _isPlaying = false;
            _playEnded = true;
        }
        function playAll(newTime, symbol, isReverse) {
            symbol = symbol || _stage;
            newTime = newTime || symbol.getPosition();
            if (isReverse) {
                symbol.playReverse(newTime);
            } else {
                symbol.play(newTime);
            }
            var playableSymbols = getPlayableSymbols(newTime, symbol);
            for (var k = 0, len = playableSymbols.length; k < len; k++) {
                var childSymbol = playableSymbols[k].symbol;
                var triggerPosition = playableSymbols[k].position;
                var childIsReverse = playableSymbols[k].isReverse;
                var childNewTime = newTime - triggerPosition;
                if (childIsReverse) {
                    childNewTime = childSymbol.getDuration() - childNewTime;
                }
                playAll(childNewTime, childSymbol, childIsReverse);
            }
        }
        function stopAll(newTime, symbol) {
            symbol = symbol || _stage;
            newTime = newTime || symbol.getPosition();
            symbol.stop(newTime);
            var playableSymbols = getPlayableSymbols(newTime, symbol);
            for (var k = 0, len = playableSymbols.length; k < len; k++) {
                var childSymbol = playableSymbols[k].symbol;
                var triggerPosition = playableSymbols[k].position;
                var isReverse = playableSymbols[k].isReverse;
                var childNewTime = newTime - triggerPosition;
                if (isReverse) {
                    childNewTime = childSymbol.getDuration() - childNewTime;
                }
                stopAll(childNewTime, childSymbol);
            }
            symbol.stopAll();
        }
        function getPlayableSymbols(newTime, symbol) {
            var playableSymbols = [];
            var revSymbolPositions = [];
            var timelines = symbol.timelines["Default Timeline"].timeline.sort();
            for (var i = 0, length = timelines.length; i < length; i++) {
                var timeline = timelines[i];
                if (!timeline.trigger) continue;
                var triggerData = timeline.trigger[1];
                var triggerAction = triggerData[0];
                var selector = triggerData[1];
                var triggerSymbol = symbol.getSymbol(selector);
                var isReverse = triggerAction === "playReverse";
                if (isReverse) {
                    revSymbolPositions[selector] = timeline.position;
                }
                if (triggerAction === "play" || triggerAction === "playReverse") {
                    var playFromTime = 0;
                    if (triggerData[2].length > 0) {
                        if (typeof triggerData[2][0] === "string") {
                            var labels = triggerSymbol.getTimelineData("Default Timeline").labels;
                            if (labels) {
                                playFromTime = labels[triggerData[2][0]];
                            }
                        } else {
                            playFromTime = triggerData[2][0];
                        }
                    }
                    var timelineStart = timeline.position - playFromTime;
                    var timelineEnd = timelineStart + triggerSymbol.getDuration();
                    if (newTime > timeline.position && newTime < timelineEnd) {
                        playableSymbols.push({
                            symbol: triggerSymbol,
                            position: timelineStart,
                            isReverse: isReverse
                        });
                    } else if (newTime <= timeline.position) {
                        var beforeTime = isReverse ? triggerSymbol.getDuration() : 0;
                        triggerSymbol.seek(beforeTime);
                    } else if (newTime >= timelineEnd) {
                        var afterTime = isReverse ? 0 : triggerSymbol.getDuration();
                        triggerSymbol.seek(afterTime);
                    }
                }
                if (triggerAction === "stop") {
                    if (newTime > timeline.position) {
                        var symbolPosition = revSymbolPositions[selector] ? triggerSymbol.getDuration() - timeline.position + revSymbolPositions[selector] : timeline.position;
                        triggerSymbol.seek(symbolPosition);
                        for (var k = 0; k < playableSymbols.length; k++) {
                            if (playableSymbols[k].symbol === triggerSymbol) {
                                playableSymbols.splice(k, 1);
                            }
                        }
                    }
                }
            }
            return playableSymbols;
        }
        function adjustVolume(volume) {
            if (volume === 0) volume = .001;
            _volThumb.attr("aria-valuenow", Math.round(volume * 100));
            _audioTrack.volume = volume;
            var trackHeight = $(".player-vol-slider .player-track").height();
            var y = trackHeight - trackHeight * volume;
            $(".player-vol-slider .player-progress").css("top", y + "px");
        }
        function playButtonClicked() {
            if (_isPlaying) stop(); else play();
        }
        function muteButtonClicked(event) {
            if (_isMuted) {
                adjustVolume(_lastVolume);
                $(".player-vol-button").removeClass("muted");
                $(".player-vol-slider .player-track").css("opacity", 1);
                _volThumb.on("keydown", volThumbKeyDown).on("mousedown", volThumbMouseDown).on("touchstart", volThumbMouseDown).show();
                _muteButton.html("Mute").removeClass("muted");
            } else {
                _lastVolume = _audioTrack.volume;
                adjustVolume(0);
                $(".player-vol-button").addClass("muted");
                $(".player-vol-slider .player-track").css("opacity", .4);
                _volThumb.off("keydown", volThumbKeyDown).off("mousedown", volThumbMouseDown).off("touchstart", volThumbMouseDown).hide();
                _muteButton.html("Un mute").addClass("muted");
            }
            _isMuted = !_isMuted;
        }
        function timeTrackMouseDown(event) {
            $(".player-poster").hide();
            if (_isThumbDown) return;
            _isThumbDown = true;
            var x = event.offsetX ? event.offsetX : event.originalEvent.layerX;
            var percentage = x / $(".player-time-slider .player-track").width();
            gotoTimeAsPercentage(percentage);
        }
        function volTrackMouseDown(event) {
            event.stopPropagation();
            if (_isVolThumbDown) return;
            _isVolThumbDown = true;
            var eventY = getEventY(event);
            var percentage = getVolSliderPercentageFor(eventY);
            adjustVolume(1 - percentage);
        }
        function timeThumbKeyDown(event) {
            event.stopPropagation();
            if (!(event.keyCode === 9 || event.shiftKey === true && event.keyCode === 9)) $(".player-poster").hide();
            var currentTime = (_audioTrack.currentTime * 1e3 - _timelineDifference) / 1e3;
            var newTime;
            switch (event.keyCode) {
              case 13:
                playButtonClicked();
                break;

              case 33:
                newTime = Math.min(currentTime / _options.duration + .1, 1);
                gotoTimeAsPercentage(newTime);
                break;

              case 34:
                newTime = Math.max(currentTime / _options.duration - .1, 0);
                gotoTimeAsPercentage(newTime);
                break;

              case 39:
                newTime = Math.min(currentTime + 5, _options.duration);
                gotoTimeAsPercentage(newTime / _options.duration);
                break;

              case 37:
                newTime = Math.max(currentTime - 5, 0);
                gotoTimeAsPercentage(newTime / _options.duration);
                break;

              case 38:
                event.stopPropagation();
                event.preventDefault();
                newTime = Math.min(currentTime + 5, _options.duration);
                gotoTimeAsPercentage(newTime / _options.duration);
                break;

              case 40:
                event.stopPropagation();
                event.preventDefault();
                newTime = Math.max(currentTime - 5, 0);
                gotoTimeAsPercentage(newTime / _options.duration);
                break;

              case 36:
                if (_isPlaying) $(".player-poster").hide(); else $(".player-poster").show();
                gotoTimeAsPercentage(0);
                break;

              case 35:
                gotoTimeAsPercentage(1);
                break;

              case 32:
                playButtonClicked();
                break;

              case 49:
                gotoTimeAsPercentage(.1);
                break;

              case 50:
                gotoTimeAsPercentage(.2);
                break;

              case 51:
                gotoTimeAsPercentage(.3);
                break;

              case 52:
                gotoTimeAsPercentage(.4);
                break;

              case 53:
                gotoTimeAsPercentage(.5);
                break;

              case 54:
                gotoTimeAsPercentage(.6);
                break;

              case 55:
                gotoTimeAsPercentage(.7);
                break;

              case 56:
                gotoTimeAsPercentage(.8);
                break;

              case 57:
                gotoTimeAsPercentage(.9);
                break;

              case 48:
                if (_isPlaying) $(".player-poster").hide(); else $(".player-poster").show();
                gotoTimeAsPercentage(0);
                break;
            }
        }
        function volThumbKeyDown(event) {
            if (event.keyCode !== 9) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (event.shiftKey === true && event.keyCode === 9) {
                $(".player-vol-button").focus();
            } else if (event.keyCode === 38 || event.keyCode === 39) {
                adjustVolume(Math.min(_audioTrack.volume + .05, 1));
            } else if (event.keyCode === 40 || event.keyCode === 37) {
                adjustVolume(Math.max(_audioTrack.volume - .05, 0));
            } else if (event.keyCode === 33) {
                adjustVolume(Math.min(_audioTrack.volume + .1, 1));
            } else if (event.keyCode === 34) {
                adjustVolume(Math.max(_audioTrack.volume - .1, 0));
            }
        }
        function backButtonClicked(event) {
            if (!_isPlaying) $(".player-poster").show();
            gotoTimeAsPercentage(0);
        }
        function nextButtonClicked(event) {
            $(".player-poster").hide();
            gotoTimeAsPercentage(1);
            playEnded();
        }
        function timeThumbMouseDown() {
            $(".player-poster").hide();
            _isThumbDown = true;
        }
        function volThumbMouseDown(event) {
            event.stopPropagation();
            _isVolThumbDown = true;
        }
        function volumeButtonMouseDown(event) {
            event.stopPropagation();
        }
        function muteButtonMouseDown(event) {
            event.stopPropagation();
        }
        function muteButtonKeyDown(event) {
            if (event.shiftKey === true && event.keyCode === 9) {
                event.preventDefault();
                event.stopPropagation();
                if ($(".player-vol-slider .player-thumb").is(":visible")) $(".player-vol-slider .player-thumb").focus(); else $(".player-next-button").focus();
            } else if (event.keyCode === 9) {
                event.stopPropagation();
                $(".player-vol-button").focus();
            }
        }
        function documentKeyUp(event) {
            if (event.keyCode === 9) $(".player-all-controls button").addClass("accessible");
            if (_volShowing) {
                var hideVolume = true;
                $(".vol-group").each(function() {
                    if (document.activeElement === this) hideVolume = false;
                });
                if (hideVolume) {
                    _volShowing = true;
                    volumeButtonClicked(null);
                }
            }
        }
        function documentMouseUp() {
            _isThumbDown = false;
            _isVolThumbDown = false;
        }
        function documentMouseDown() {
            volumeButtonClicked(null);
        }
        function documentMouseMove(event) {
            if (_isThumbDown) {
                event.stopPropagation();
                event.preventDefault();
                var eventX = getEventX(event);
                var percentage = getTimeTrackPercentageFor(eventX);
                gotoTimeAsPercentage(Math.min(percentage, 1));
            } else if (_isVolThumbDown) {
                event.stopPropagation();
                event.preventDefault();
                var eventY = getEventY(event);
                var percentage = getVolSliderPercentageFor(eventY);
                adjustVolume(1 - Math.max(0, Math.min(1, percentage)));
            }
        }
        function CCButtonClicked(event) {
            _showSubtitles = !_showSubtitles;
            if (_showSubtitles) {
                _subtitles.show();
                $(".player-CC-button").addClass("on");
                $(".player-CC-button").html("Turn off closed captioning");
            } else {
                _subtitles.hide();
                $(".player-CC-button").removeClass("on");
                $(".player-CC-button").html("Turn on closed captioning");
            }
        }
        function volumeButtonClicked(event) {
            if (_volShowing) {
                $(".player-vol-slider").animate({
                    bottom: "-170px"
                }, 400, "easeInQuad", function() {
                    $(".player-vol-slider").hide();
                });
                $(document).off("mousedown", documentMouseDown);
                $(".player-vol-button").html("Show volume controls");
            } else {
                $(".player-vol-slider").show();
                $(".player-vol-slider").animate({
                    bottom: "40px"
                }, 600, "easeOutExpo");
                $(document).on("mousedown", documentMouseDown);
                setTimeout(function() {
                    if (_isMuted) $(".player-mute-button").focus(); else $(".player-vol-slider .player-thumb").focus();
                }, 400);
                $(".player-vol-button").html("Hide volume controls");
            }
            _volShowing = !_volShowing;
        }
        function fullscreenButtonClicked() {
            if (_isFullscreen) restoreFromFullscreen(); else goFullscreen();
        }
        function goFullscreen() {
            var showFocus = document.activeElement === $(".player-fullscreen-button")[0];
            $(".player-controls *").hide();
            _subtitles.hide();
            var bodyWidth = $(window).width();
            var bodyHeight = $(window).height() - $(".player-controls").height();
            var scale = Math.min(bodyWidth / _anim.width(), bodyHeight / _anim.height());
            scalePlayer(scale);
            $("#player-base").addClass("no-shadow");
            $(".player-inner").appendTo("body");
            $(".player-inner").addClass("fullscreen");
            $("#player-base").css("opacity", 0);
            $(".player-fullscreen-button").addClass("on");
            $(".player-fullscreen-button").html("Restore from full screen");
            if (_showSubtitles) {
                _subtitles.addClass("fullscreen");
                _subtitles.show();
            }
            scalePlayer(1);
            scaleElem(_anim, scale);
            scaleElem(_subtitles, scale, "left " + _subtitles.height() + "px");
            _anim.css("left", (bodyWidth - _anim.width() * scale) / 2);
            _subtitles.css("left", (bodyWidth - _anim.width() * scale) / 2);
            _subtitles.css("bottom", 42 - $(".player-controls").height() * scale);
            setTimeSliderWidth();
            $(".player-controls *").show();
            if (showFocus) $(".player-fullscreen-button").focus();
            _isFullscreen = true;
            widget._trigger("maximizeComplete", null, null);
        }
        function restoreFromFullscreen() {
            var showFocus = document.activeElement === $(".player-fullscreen-button")[0];
            $(".player-controls *").hide();
            _subtitles.hide();
            $(".player-fullscreen-button").removeClass("on");
            $(".player-fullscreen-button").html("Go to full screen");
            $(".player-inner").appendTo(_options.element);
            $(".player-inner").removeClass("fullscreen");
            $("#player-base").removeClass("no-shadow");
            $("#player-base").css("opacity", 1);
            _anim.css("left", 0);
            _subtitles.css("left", 0);
            _subtitles.css("bottom", 0);
            var scale = _anim.width() / _playerContent.width();
            scalePlayer(scale);
            scaleElem(_anim, 1);
            scaleElem(_subtitles, 1);
            _subtitles.removeClass("fullscreen");
            if (_showSubtitles) _subtitles.show();
            setTimeSliderWidth();
            $(".player-controls *").show();
            if (showFocus) $(".player-fullscreen-button").focus();
            _isFullscreen = false;
            widget._trigger("restoreComplete", null, null);
        }
        function windowResized() {
            if (_isFullscreen) {
                var bodyWidth = $(window).width();
                var bodyHeight = $(window).height() - $(".player-controls").height();
                var scale = Math.min(bodyWidth / _anim.width(), bodyHeight / _anim.height());
                var _subs = $(".player-subtitles");
                scalePlayer(1);
                scaleElem(_anim, scale);
                scaleElem(_subs, scale, "left " + _subs.height() + "px");
                _anim.css("left", (bodyWidth - _anim.width() * scale) / 2);
                _subs.css("left", (bodyWidth - _anim.width() * scale) / 2);
                _subs.css("bottom", 42 - $(".player-controls").height() * scale);
                setTimeSliderWidth();
                widget._trigger("windowResized", null, {
                    stageWidth: _anim.width() * scale,
                    stageHeight: _anim.height() * scale,
                    controlsWidth: _playerControls.width(),
                    controlsHeight: _playerControls.height()
                });
            } else {
                var win = $(window);
                var w = Math.min(win.width(), 638);
                var h = Math.min(win.height(), 523);
                var s = Math.min(w / 638, h / 523);
                scalePlayer(s);
                $("#animation-container").height(523 * s);
            }
        }
        function getVolSliderPercentageFor(eventY) {
            var playerBaseOffset = $("#player-base").offset().top;
            var trackTop = $(".player-vol-slider .player-track").offset().top;
            var y = eventY - trackTop;
            var trackHeight = $(".player-vol-slider .player-track").height();
            var trackHeightActual = trackHeight * _playerScale;
            var percentage = y / trackHeightActual;
            return percentage;
        }
        function getTimeTrackPercentageFor(eventX) {
            var playerBaseOffset = $("#player-base").offset().left;
            var trackLeft = $(".player-time-slider .player-track").offset().left;
            var x = eventX - trackLeft;
            var trackWidth = $(".player-time-slider .player-track").width();
            var trackWidthActual = trackWidth * _playerScale;
            var percentage = x / trackWidthActual;
            return percentage;
        }
        function transElem(element, transform) {
            element.css("-webkit-transform", transform);
            element.css("-moz-transform", transform);
            element.css("-o-transform", transform);
            element.css("transform", transform);
            element.css("-ms-transform", transform);
        }
        function transOrigin(element, origin) {
            element.css("-webkit-transform-origin", origin);
            element.css("-moz-transform-origin", origin);
            element.css("-o-transform-origin", origin);
            element.css("transform-origin", origin);
            element.css("-ms-transform-origin", origin);
        }
        function scaleElem(element, scale, _origin) {
            var transform = "scale(" + scale + ", " + scale + ")";
            var origin = _origin || "top left";
            transElem(element, transform);
            transOrigin(element, origin);
        }
        function scalePlayer(scale) {
            _playerScale = scale;
            scaleElem($("#player-base"), scale);
            scaleElem($("#player-subtitles"), scale, "bottom left");
        }
        function clearScalePlayer() {
            scalePlayer(1);
        }
        function clearScaleElem(element) {
            transElem(element, "none");
        }
        function getEventX(eve) {
            if (eve.originalEvent.touches && eve.originalEvent.touches[0].pageX) return eve.originalEvent.touches[0].pageX;
            if (eve.clientX) return eve.clientX;
            if (eve.originalEvent.layerX) return eve.originalEvent.layerX;
            return 0;
        }
        function getEventY(eve) {
            if (eve.originalEvent.touches && eve.originalEvent.touches[0].pageY) return eve.originalEvent.touches[0].pageY;
            if (eve.pageY) return eve.pageY;
            if (eve.clientY) return eve.clientY;
            if (eve.originalEvent.layerY) return eve.originalEvent.layerY;
            return 0;
        }
        function pad(n, width, z) {
            z = z || "0";
            n = n + "";
            return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
        }
        function setTimeSliderWidth() {
            if (_totalButtonWidth === 0) {
                $(".player-controls > button").each(function() {
                    _totalButtonWidth += $(this).outerWidth(true);
                });
            }
            $(".player-time-slider").width($(".player-controls").innerWidth() - _totalButtonWidth - _safariTimeSliderDiff);
        }
        function destroy() {}
        init();
        return {
            destroy: destroy,
            playButtonClicked: playButtonClicked,
            play: play,
            playFrom: playFrom,
            stop: stop,
            init: init,
            windowResized: windowResized
        };
    }
})(jQuery);

var _srt;

var _nextSubtitleTime = 0;

var _lastSubtitleTime = 0;

var _lastSubtitle = "";

function initSubtitles(srtData) {
    _srt = parseSRT({
        text: srtData
    });
}

function getSubtitle(time) {
    if (time > _lastSubtitleTime && time < _nextSubtitleTime) return _lastSubtitle;
    for (var i = _srt.data.length - 1; i >= 0; i--) {
        if (time >= _srt.data[i].subtitle.start && time <= _srt.data[i].subtitle.end) {
            _lastSubtitleTime = _srt.data[i].subtitle.start;
            _nextSubtitleTime = _srt.data[i].subtitle.end;
            _lastSubtitle = _srt.data[i].subtitle.text;
            return _srt.data[i].subtitle.text;
        }
    }
}

function parseSRT(data) {
    var retObj = {
        title: "",
        remote: "",
        data: []
    }, subs = [], i = 0, idx = 0, lines, time, text, endIdx, sub;
    lines = data.text.split(/(?:\r\n|\r|\n)/gm);
    endIdx = lastNonEmptyLine(lines) + 1;
    for (i = 0; i < endIdx; i++) {
        sub = {};
        text = [];
        sub.id = parseInt(lines[i++], 10);
        time = lines[i++].split(/[\t ]*-->[\t ]*/);
        sub.start = toSeconds(time[0]);
        idx = time[1].indexOf(" ");
        if (idx !== -1) {
            time[1] = time[1].substr(0, idx);
        }
        sub.end = toSeconds(time[1]);
        while (i < endIdx && lines[i]) {
            text.push(lines[i++]);
        }
        sub.text = text.join("\\N").replace(/\{(\\[\w]+\(?([\w\d]+,?)+\)?)+\}/gi, "");
        sub.text = sub.text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        sub.text = sub.text.replace(/&lt;(\/?(font|b|u|i|s))((\s+(\w|\w[\w\-]*\w)(\s*=\s*(?:\".*?\"|'.*?'|[^'\">\s]+))?)+\s*|\s*)(\/?)&gt;/gi, "<$1$3$7>");
        sub.text = sub.text.replace(/\\N/gi, "<br />");
        subs.push(createTrack("subtitle", sub));
    }
    retObj.data = subs;
    return retObj;
}

function createTrack(name, attributes) {
    var track = {};
    track[name] = attributes;
    return track;
}

function toSeconds(t_in) {
    var t = t_in.split(":");
    try {
        var s = t[2].split(",");
        if (s.length === 1) {
            s = t[2].split(".");
        }
        return parseFloat(t[0], 10) * 3600 + parseFloat(t[1], 10) * 60 + parseFloat(s[0], 10) + parseFloat(s[1], 10) / 1e3;
    } catch (e) {
        return 0;
    }
}

function lastNonEmptyLine(linesArray) {
    var idx = linesArray.length - 1;
    while (idx >= 0 && !linesArray[idx]) {
        idx--;
    }
    return idx;
}